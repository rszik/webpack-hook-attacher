/*!
 * Copyright (c) 2022, Roland Szikora.
 * You can support this package at https://www.patreon.com/rolandszik
 */
import { CompilationHook } from './options';
export interface ICompilationHooksContainer {
    buildModule: CompilationHook;
    rebuildModule: CompilationHook;
    failedModule: CompilationHook;
    succeedModule: CompilationHook;
    finishModules: CompilationHook;
    finishRebuildingModule: CompilationHook;
    seal: CompilationHook;
    unseal: CompilationHook;
    optimizeDependencies: CompilationHook;
    afterOptimizeDependencies: CompilationHook;
    afterChunks: CompilationHook;
    optimize: CompilationHook;
    optimizeModules: CompilationHook;
    afterOptimizeModules: CompilationHook;
    optimizeChunks: CompilationHook;
    afterOptimizeChunks: CompilationHook;
    optimizeTree: CompilationHook;
    afterOptimizeTree: CompilationHook;
    optimizeChunkModules: CompilationHook;
    afterOptimizeChunkModules: CompilationHook;
    shouldRecord: CompilationHook;
    reviveModules: CompilationHook;
    beforeModuleIds: CompilationHook;
    moduleIds: CompilationHook;
    optimizeModuleIds: CompilationHook;
    afterOptimizeModuleIds: CompilationHook;
    reviveChunks: CompilationHook;
    beforeChunkIds: CompilationHook;
    chunkIds: CompilationHook;
    optimizeChunkIds: CompilationHook;
    afterOptimizeChunkIds: CompilationHook;
    recordModules: CompilationHook;
    recordChunks: CompilationHook;
    beforeModuleHash: CompilationHook;
    afterModuleHash: CompilationHook;
    beforeHash: CompilationHook;
    afterHash: CompilationHook;
    recordHash: CompilationHook;
    record: CompilationHook;
    beforeModuleAssets: CompilationHook;
    additionalChunkAssets: CompilationHook;
    shouldGenerateChunkAssets: CompilationHook;
    beforeChunkAssets: CompilationHook;
    additionalAssets: CompilationHook;
    optimizeChunkAssets: CompilationHook;
    afterOptimizeChunkAssets: CompilationHook;
    optimizeAssets: CompilationHook;
    afterOptimizeAssets: CompilationHook;
    processAssets: CompilationHook;
    afterProcessAssets: CompilationHook;
    needAdditionalSeal: CompilationHook;
    afterSeal: CompilationHook;
    chunkHash: CompilationHook;
    moduleAsset: CompilationHook;
    chunkAsset: CompilationHook;
    assetPath: CompilationHook;
    needAdditionalPass: CompilationHook;
    childCompiler: CompilationHook;
    statsPreset: CompilationHook;
    statsNormalize: CompilationHook;
    statsFactory: CompilationHook;
    statsPrinter: CompilationHook;
}
export declare class CompilationHookNames {
    buildModule: string;
    rebuildModule: string;
    failedModule: string;
    succeedModule: string;
    finishModules: string;
    finishRebuildingModule: string;
    seal: string;
    unseal: string;
    optimizeDependencies: string;
    afterOptimizeDependencies: string;
    afterChunks: string;
    optimize: string;
    optimizeModules: string;
    afterOptimizeModules: string;
    optimizeChunks: string;
    afterOptimizeChunks: string;
    optimizeTree: string;
    afterOptimizeTree: string;
    optimizeChunkModules: string;
    afterOptimizeChunkModules: string;
    shouldRecord: string;
    reviveModules: string;
    beforeModuleIds: string;
    moduleIds: string;
    optimizeModuleIds: string;
    afterOptimizeModuleIds: string;
    reviveChunks: string;
    beforeChunkIds: string;
    chunkIds: string;
    optimizeChunkIds: string;
    afterOptimizeChunkIds: string;
    recordModules: string;
    recordChunks: string;
    beforeModuleHash: string;
    afterModuleHash: string;
    beforeHash: string;
    afterHash: string;
    recordHash: string;
    record: string;
    beforeModuleAssets: string;
    additionalChunkAssets: string;
    shouldGenerateChunkAssets: string;
    beforeChunkAssets: string;
    additionalAssets: string;
    optimizeChunkAssets: string;
    afterOptimizeChunkAssets: string;
    optimizeAssets: string;
    afterOptimizeAssets: string;
    processAssets: string;
    afterProcessAssets: string;
    needAdditionalSeal: string;
    afterSeal: string;
    chunkHash: string;
    moduleAsset: string;
    chunkAsset: string;
    assetPath: string;
    needAdditionalPass: string;
    childCompiler: string;
    statsPreset: string;
    statsNormalize: string;
    statsFactory: string;
    statsPrinter: string;
    static get i(): CompilationHookNames;
}
export declare class CompilationHookCallbackParameters {
    static MODULE: string;
    static ERROR: string;
    static MODULES: string;
    static CHUNKS: string;
    static RECORDS: string;
    static COMPILATION: string;
    static ASSETS: string;
    static CHUNK: string;
    static CHUNK_HASH: string;
    static FILENAME: string;
    static PATH: string;
    static OPTIONS: string;
    static CHILD_COMPILER: string;
    static COMPILER_NAME: string;
    static COMPILER_INDEX: string;
    static CONTEXT: string;
    static STATS_FACTORY: string;
    static STATS_PRINTER: string;
    module: any;
    error: any;
    modules: any;
    chunks: any;
    records: any;
    compilation: any;
    assets: any;
    chunk: any;
    chunkHash: any;
    filename: any;
    path: any;
    options: any;
    childCompiler: any;
    compilerName: any;
    compilerIndex: any;
    context: any;
    statsFactory: any;
    statsPrinter: any;
}
export declare class CompilationHookInitializer {
    static initHooks(container: ICompilationHooksContainer): void;
}
